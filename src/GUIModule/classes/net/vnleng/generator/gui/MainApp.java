/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package net.vnleng.generator.gui;

import net.vnleng.generator.data.shared.SharedData;
import com.formdev.flatlaf.FlatDarkLaf;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import net.vnleng.generator.gui.panels.project.OpenProjectPane;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import net.vnleng.generator.data.Project;
import net.vnleng.generator.data.ints.ResourceType;
import net.vnleng.generator.data.scl.impls.DataBlockElement;
import net.vnleng.generator.data.scl.impls.DataBlockInstanceElement;
import net.vnleng.generator.data.scl.impls.FunctionBlockElement;
import net.vnleng.generator.data.scl.impls.FunctionElement;
import net.vnleng.generator.data.scl.ints.FunctionResource;
import net.vnleng.generator.data.serialization.ProjectSerializer;
import net.vnleng.generator.data.serialization.ProjectUnrecognizedError;
import net.vnleng.generator.data.serialization.ProjectVersionError;
import net.vnleng.generator.gui.panels.FrameCreator;
import net.vnleng.generator.gui.panels.project.ProjectContentPane;
import net.vnleng.generator.resources.ProjectResourceHandler;

/**
 *
 * @author gabri
 */
public class MainApp extends javax.swing.JFrame {

    private static final SharedData sharedData = new SharedData();

    /**
     * Creates new form MainApp
     */
    public MainApp() {
        initComponents();
        initDataListeners();
        setupFrontPage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DesktopPane = new javax.swing.JDesktopPane();
        AppMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewProject = new javax.swing.JMenuItem();
        OpenProject = new javax.swing.JMenuItem();
        Sep1 = new javax.swing.JPopupMenu.Separator();
        SaveProject = new javax.swing.JMenuItem();
        SaveAsProject = new javax.swing.JMenuItem();
        CloseProject = new javax.swing.JMenuItem();
        Sep2 = new javax.swing.JPopupMenu.Separator();
        ExitProgram = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(755, 441));
        setName("MainFrame"); // NOI18N
        setSize(new java.awt.Dimension(840, 620));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        DesktopPane.setAutoscrolls(true);
        DesktopPane.setMinimumSize(new java.awt.Dimension(755, 418));
        getContentPane().add(DesktopPane);

        FileMenu.setText("File");

        NewProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        NewProject.setText("Nuovo Progetto");
        NewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewProjectActionPerformed(evt);
            }
        });
        FileMenu.add(NewProject);

        OpenProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        OpenProject.setText("Apri Progetto");
        OpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenProjectActionPerformed(evt);
            }
        });
        FileMenu.add(OpenProject);
        FileMenu.add(Sep1);

        SaveProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SaveProject.setText("Salva");
        SaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveProjectActionPerformed(evt);
            }
        });
        FileMenu.add(SaveProject);

        SaveAsProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SaveAsProject.setText("Salva con nome");
        SaveAsProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsProjectActionPerformed(evt);
            }
        });
        FileMenu.add(SaveAsProject);

        CloseProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        CloseProject.setText("Chiudi Progetto");
        FileMenu.add(CloseProject);
        FileMenu.add(Sep2);

        ExitProgram.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        ExitProgram.setText("Esci");
        ExitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitProgramActionPerformed(evt);
            }
        });
        FileMenu.add(ExitProgram);

        AppMenuBar.add(FileMenu);

        EditMenu.setText("Edit");
        AppMenuBar.add(EditMenu);

        setJMenuBar(AppMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewProjectActionPerformed
        // TODO add your handling code here:
        showOpenProjectPane();
    }//GEN-LAST:event_NewProjectActionPerformed

    private void OpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenProjectActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        jfc.setAcceptAllFileFilterUsed(true);
        FileFilter ff = new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".gtpj");
            }

            @Override
            public String getDescription() {
                return "GTPJ - File di Progetto";
            }
        };
        jfc.setFileFilter(ff);
        jfc.showOpenDialog(this);
        File selectedFile = jfc.getSelectedFile();
        if (selectedFile != null) {
            String path = selectedFile.getAbsolutePath();
            try {
                Project p = ProjectSerializer.deserializeProject(path);
                sharedData.setOpenedProject(p, true, path);
            } catch (FileNotFoundException ex) {
                JOptionPane.showConfirmDialog(this.getParent(), "Non è possibile trovare il file progetto.", "File non trovato", JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(this.getParent(), "Non è possibile leggere il file progetto.", "File non leggibile", JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
            } catch (ProjectUnrecognizedError pue) {
                JOptionPane.showConfirmDialog(this.getParent(), "Il file progetto non può essere aperto\nin quanto risulta danneggiato.", "Progetto non riconosciuto", JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
            } catch (ProjectVersionError pve) {
                JOptionPane.showConfirmDialog(this.getParent(), "Il file progetto non può essere aperto in quanto\nrisulta creato con una versione differente.", "Progetto Incompatibile", JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_OpenProjectActionPerformed

    private void ExitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitProgramActionPerformed
        // TODO add your handling code here:
        if (sharedData.hasBeenEdited() || true) {
            JButton undo = new JButton("Annulla");
            JButton saveAndClose = new JButton("Salva e Chiudi");
            JButton close = new JButton("Chiudi");
            int showOptionDialog = JOptionPane.showOptionDialog(this, "Hai modifiche non salvate.\nVuoi uscire senza salvare?", "Salva Progetto?",
                    0, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{undo, saveAndClose, close}, saveAndClose);
            if (showOptionDialog == 1) {
                saveProject(false);
            }
        }

    }//GEN-LAST:event_ExitProgramActionPerformed

    private void SaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveProjectActionPerformed
        // TODO add your handling code here:
        saveProject(false);
    }//GEN-LAST:event_SaveProjectActionPerformed

    private void SaveAsProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsProjectActionPerformed
        // TODO add your handling code here:
        saveProject(true);
    }//GEN-LAST:event_SaveAsProjectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println(ex.toString());
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainApp app = new MainApp();
            app.setIconImage(ProjectResourceHandler.AppIcon_512.getImage());
            app.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar AppMenuBar;
    private javax.swing.JMenuItem CloseProject;
    private javax.swing.JDesktopPane DesktopPane;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem ExitProgram;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem NewProject;
    private javax.swing.JMenuItem OpenProject;
    private javax.swing.JMenuItem SaveAsProject;
    private javax.swing.JMenuItem SaveProject;
    private javax.swing.JPopupMenu.Separator Sep1;
    private javax.swing.JPopupMenu.Separator Sep2;
    // End of variables declaration//GEN-END:variables

    private void initDataListeners() {
        sharedData.addProjectOpenedEventListener((data) -> {
            this.setTitle(data.getProjectName());
            if (data.getResources().isEmpty()) {
                data.addResource(new FunctionBlockElement("Test"));
                data.addResource(new FunctionElement("Test2"));
                data.addResource(new FunctionElement("Test3"));
                data.addResource(new FunctionElement("Test4"));
                data.addResource(new DataBlockElement("Test5"));
                data.addResource(new DataBlockInstanceElement("Test5", (FunctionResource) data.getResource(ResourceType.Function, "Test4")));
            }
            showProjectContentPane();
        });
    }

    private JInternalFrame showOpenProjectPane() {
        OpenProjectPane content = new OpenProjectPane(sharedData);
        JInternalFrame jif = FrameCreator.createFrame("Nuovo progetto", false, content);
        jif.setLayer(3);
        this.DesktopPane.add(jif);
        content.focus();

        content.addCloseRequestListener(() -> {
            jif.setVisible(false);
            this.DesktopPane.remove(jif);
        });
        return jif;
    }

    private JInternalFrame showProjectContentPane() {
        ProjectContentPane content = new ProjectContentPane(sharedData);
        JInternalFrame jif = FrameCreator.createFrame("Struttura Progetto", true, content);
        jif.setLayer(1);
        this.DesktopPane.add(jif);
        return jif;
    }

    private void setupFrontPage() {
        JInternalFrame frame = showOpenProjectPane();
        int xpos = (DesktopPane.getWidth() - frame.getWidth()) / 2;
        int ypos = (DesktopPane.getHeight() - frame.getHeight()) / 2;
        frame.setLocation(xpos, ypos);
    }

    private void saveProject(boolean saveAs) {
        String filePath = null;
        if (sharedData.hasFileAssocieted() && !saveAs) {
            filePath = sharedData.getFilePath();
        } else {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".gtpj");
                }

                @Override
                public String getDescription() {
                    return "GPTJ - File Progetto";
                }
            });
            int showSaveDialog = jfc.showSaveDialog(this);
            if (showSaveDialog == JFileChooser.CANCEL_OPTION || showSaveDialog == JFileChooser.ERROR_OPTION) {
                return;
            } else if (showSaveDialog == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                filePath = selectedFile.toString();
                if (selectedFile.isDirectory()) {
                    filePath = filePath + File.separatorChar + sharedData.getProject().getProjectName() + ".gtpj";
                } else if (!selectedFile.getName().endsWith(".gtpj")) {
                    filePath = filePath + ".gtpj";
                }
            }
        }
        try {
            sharedData.save(filePath);
        } catch (IOException ex) {
            System.getLogger(MainApp.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
    }

}
